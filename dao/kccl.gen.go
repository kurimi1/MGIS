// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"LGIS/model"
)

func newKccl(db *gorm.DB) kccl {
	_kccl := kccl{}

	_kccl.kcclDo.UseDB(db)
	_kccl.kcclDo.UseModel(&model.Kccl{})

	tableName := _kccl.kcclDo.TableName()
	_kccl.ALL = field.NewField(tableName, "*")
	_kccl.KCAAA = field.NewString(tableName, "KCAAA")
	_kccl.KCC = field.NewString(tableName, "KCC")
	_kccl.PKCE = field.NewString(tableName, "PKCE")
	_kccl.PKCABF = field.NewFloat64(tableName, "PKCABF")
	_kccl.PKCABA = field.NewFloat64(tableName, "PKCABA")
	_kccl.PKCABB = field.NewFloat64(tableName, "PKCABB")
	_kccl.PKCABC = field.NewFloat64(tableName, "PKCABC")
	_kccl.PKCABD = field.NewFloat64(tableName, "PKCABD")
	_kccl.PKCABT = field.NewFloat64(tableName, "PKCABT")
	_kccl.PKCABU = field.NewFloat64(tableName, "PKCABU")
	_kccl.PKCABV = field.NewFloat64(tableName, "PKCABV")
	_kccl.数据 = field.NewString(tableName, "数据")

	_kccl.fillFieldMap()

	return _kccl
}

type kccl struct {
	kcclDo kcclDo

	ALL    field.Field
	KCAAA  field.String
	KCC    field.String
	PKCE   field.String
	PKCABF field.Float64
	PKCABA field.Float64
	PKCABB field.Float64
	PKCABC field.Float64
	PKCABD field.Float64
	PKCABT field.Float64
	PKCABU field.Float64
	PKCABV field.Float64
	数据     field.String

	fieldMap map[string]field.Expr
}

func (k kccl) Table(newTableName string) *kccl {
	k.kcclDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kccl) As(alias string) *kccl {
	k.kcclDo.DO = *(k.kcclDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kccl) updateTableName(table string) *kccl {
	k.ALL = field.NewField(table, "*")
	k.KCAAA = field.NewString(table, "KCAAA")
	k.KCC = field.NewString(table, "KCC")
	k.PKCE = field.NewString(table, "PKCE")
	k.PKCABF = field.NewFloat64(table, "PKCABF")
	k.PKCABA = field.NewFloat64(table, "PKCABA")
	k.PKCABB = field.NewFloat64(table, "PKCABB")
	k.PKCABC = field.NewFloat64(table, "PKCABC")
	k.PKCABD = field.NewFloat64(table, "PKCABD")
	k.PKCABT = field.NewFloat64(table, "PKCABT")
	k.PKCABU = field.NewFloat64(table, "PKCABU")
	k.PKCABV = field.NewFloat64(table, "PKCABV")
	k.数据 = field.NewString(table, "数据")

	k.fillFieldMap()

	return k
}

func (k *kccl) WithContext(ctx context.Context) *kcclDo { return k.kcclDo.WithContext(ctx) }

func (k kccl) TableName() string { return k.kcclDo.TableName() }

func (k kccl) Alias() string { return k.kcclDo.Alias() }

func (k *kccl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kccl) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 12)
	k.fieldMap["KCAAA"] = k.KCAAA
	k.fieldMap["KCC"] = k.KCC
	k.fieldMap["PKCE"] = k.PKCE
	k.fieldMap["PKCABF"] = k.PKCABF
	k.fieldMap["PKCABA"] = k.PKCABA
	k.fieldMap["PKCABB"] = k.PKCABB
	k.fieldMap["PKCABC"] = k.PKCABC
	k.fieldMap["PKCABD"] = k.PKCABD
	k.fieldMap["PKCABT"] = k.PKCABT
	k.fieldMap["PKCABU"] = k.PKCABU
	k.fieldMap["PKCABV"] = k.PKCABV
	k.fieldMap["数据"] = k.数据
}

func (k kccl) clone(db *gorm.DB) kccl {
	k.kcclDo.ReplaceDB(db)
	return k
}

type kcclDo struct{ gen.DO }

func (k kcclDo) Debug() *kcclDo {
	return k.withDO(k.DO.Debug())
}

func (k kcclDo) WithContext(ctx context.Context) *kcclDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kcclDo) ReadDB(ctx context.Context) *kcclDo {
	return k.WithContext(ctx).Clauses(dbresolver.Read)
}

func (k kcclDo) WriteDB(ctx context.Context) *kcclDo {
	return k.WithContext(ctx).Clauses(dbresolver.Write)
}

func (k kcclDo) Clauses(conds ...clause.Expression) *kcclDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kcclDo) Returning(value interface{}, columns ...string) *kcclDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kcclDo) Not(conds ...gen.Condition) *kcclDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kcclDo) Or(conds ...gen.Condition) *kcclDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kcclDo) Select(conds ...field.Expr) *kcclDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kcclDo) Where(conds ...gen.Condition) *kcclDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kcclDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *kcclDo {
	return k.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (k kcclDo) Order(conds ...field.Expr) *kcclDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kcclDo) Distinct(cols ...field.Expr) *kcclDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kcclDo) Omit(cols ...field.Expr) *kcclDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kcclDo) Join(table schema.Tabler, on ...field.Expr) *kcclDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kcclDo) LeftJoin(table schema.Tabler, on ...field.Expr) *kcclDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kcclDo) RightJoin(table schema.Tabler, on ...field.Expr) *kcclDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kcclDo) Group(cols ...field.Expr) *kcclDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kcclDo) Having(conds ...gen.Condition) *kcclDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kcclDo) Limit(limit int) *kcclDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kcclDo) Offset(offset int) *kcclDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kcclDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *kcclDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kcclDo) Unscoped() *kcclDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kcclDo) Create(values ...*model.Kccl) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kcclDo) CreateInBatches(values []*model.Kccl, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kcclDo) Save(values ...*model.Kccl) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kcclDo) First() (*model.Kccl, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kccl), nil
	}
}

func (k kcclDo) Take() (*model.Kccl, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kccl), nil
	}
}

func (k kcclDo) Last() (*model.Kccl, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kccl), nil
	}
}

func (k kcclDo) Find() ([]*model.Kccl, error) {
	result, err := k.DO.Find()
	return result.([]*model.Kccl), err
}

func (k kcclDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Kccl, err error) {
	buf := make([]*model.Kccl, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kcclDo) FindInBatches(result *[]*model.Kccl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kcclDo) Attrs(attrs ...field.AssignExpr) *kcclDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kcclDo) Assign(attrs ...field.AssignExpr) *kcclDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kcclDo) Joins(fields ...field.RelationField) *kcclDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kcclDo) Preload(fields ...field.RelationField) *kcclDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kcclDo) FirstOrInit() (*model.Kccl, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kccl), nil
	}
}

func (k kcclDo) FirstOrCreate() (*model.Kccl, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kccl), nil
	}
}

func (k kcclDo) FindByPage(offset int, limit int) (result []*model.Kccl, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kcclDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k *kcclDo) withDO(do gen.Dao) *kcclDo {
	k.DO = *do.(*gen.DO)
	return k
}

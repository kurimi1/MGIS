// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"LGIS/model"
)

func newKckc(db *gorm.DB) kckc {
	_kckc := kckc{}

	_kckc.kckcDo.UseDB(db)
	_kckc.kckcDo.UseModel(&model.Kckc{})

	tableName := _kckc.kckcDo.TableName()
	_kckc.ALL = field.NewField(tableName, "*")
	_kckc.KCAAA = field.NewString(tableName, "KCAAA")
	_kckc.QDAM = field.NewString(tableName, "QDAM")
	_kckc.QDAN = field.NewString(tableName, "QDAN")
	_kckc.QDAO = field.NewString(tableName, "QDAO")
	_kckc.QDAC = field.NewString(tableName, "QDAC")
	_kckc.QDANA = field.NewString(tableName, "QDANA")
	_kckc.PKGJ = field.NewString(tableName, "PKGJ")
	_kckc.PKGDDA = field.NewString(tableName, "PKGDDA")
	_kckc.PKGDDC = field.NewString(tableName, "PKGDDC")
	_kckc.PKGDDB = field.NewString(tableName, "PKGDDB")
	_kckc.GCJDBC = field.NewFloat64(tableName, "GCJDBC")
	_kckc.PKGCC = field.NewFloat64(tableName, "PKGCC")
	_kckc.GCJDBO = field.NewFloat64(tableName, "GCJDBO")
	_kckc.PKIIA = field.NewString(tableName, "PKIIA")
	_kckc.PKIIG = field.NewString(tableName, "PKIIG")
	_kckc.PKIIH = field.NewString(tableName, "PKIIH")
	_kckc.PKIII = field.NewString(tableName, "PKIII")
	_kckc.PKIIJ = field.NewString(tableName, "PKIIJ")
	_kckc.PKIIL = field.NewString(tableName, "PKIIL")
	_kckc.MEMO = field.NewString(tableName, "MEMO")
	_kckc.数据 = field.NewString(tableName, "数据")

	_kckc.fillFieldMap()

	return _kckc
}

type kckc struct {
	kckcDo kckcDo

	ALL    field.Field
	KCAAA  field.String
	QDAM   field.String
	QDAN   field.String
	QDAO   field.String
	QDAC   field.String
	QDANA  field.String
	PKGJ   field.String
	PKGDDA field.String
	PKGDDC field.String
	PKGDDB field.String
	GCJDBC field.Float64
	PKGCC  field.Float64
	GCJDBO field.Float64
	PKIIA  field.String
	PKIIG  field.String
	PKIIH  field.String
	PKIII  field.String
	PKIIJ  field.String
	PKIIL  field.String
	MEMO   field.String
	数据     field.String

	fieldMap map[string]field.Expr
}

func (k kckc) Table(newTableName string) *kckc {
	k.kckcDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kckc) As(alias string) *kckc {
	k.kckcDo.DO = *(k.kckcDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kckc) updateTableName(table string) *kckc {
	k.ALL = field.NewField(table, "*")
	k.KCAAA = field.NewString(table, "KCAAA")
	k.QDAM = field.NewString(table, "QDAM")
	k.QDAN = field.NewString(table, "QDAN")
	k.QDAO = field.NewString(table, "QDAO")
	k.QDAC = field.NewString(table, "QDAC")
	k.QDANA = field.NewString(table, "QDANA")
	k.PKGJ = field.NewString(table, "PKGJ")
	k.PKGDDA = field.NewString(table, "PKGDDA")
	k.PKGDDC = field.NewString(table, "PKGDDC")
	k.PKGDDB = field.NewString(table, "PKGDDB")
	k.GCJDBC = field.NewFloat64(table, "GCJDBC")
	k.PKGCC = field.NewFloat64(table, "PKGCC")
	k.GCJDBO = field.NewFloat64(table, "GCJDBO")
	k.PKIIA = field.NewString(table, "PKIIA")
	k.PKIIG = field.NewString(table, "PKIIG")
	k.PKIIH = field.NewString(table, "PKIIH")
	k.PKIII = field.NewString(table, "PKIII")
	k.PKIIJ = field.NewString(table, "PKIIJ")
	k.PKIIL = field.NewString(table, "PKIIL")
	k.MEMO = field.NewString(table, "MEMO")
	k.数据 = field.NewString(table, "数据")

	k.fillFieldMap()

	return k
}

func (k *kckc) WithContext(ctx context.Context) *kckcDo { return k.kckcDo.WithContext(ctx) }

func (k kckc) TableName() string { return k.kckcDo.TableName() }

func (k kckc) Alias() string { return k.kckcDo.Alias() }

func (k *kckc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kckc) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 21)
	k.fieldMap["KCAAA"] = k.KCAAA
	k.fieldMap["QDAM"] = k.QDAM
	k.fieldMap["QDAN"] = k.QDAN
	k.fieldMap["QDAO"] = k.QDAO
	k.fieldMap["QDAC"] = k.QDAC
	k.fieldMap["QDANA"] = k.QDANA
	k.fieldMap["PKGJ"] = k.PKGJ
	k.fieldMap["PKGDDA"] = k.PKGDDA
	k.fieldMap["PKGDDC"] = k.PKGDDC
	k.fieldMap["PKGDDB"] = k.PKGDDB
	k.fieldMap["GCJDBC"] = k.GCJDBC
	k.fieldMap["PKGCC"] = k.PKGCC
	k.fieldMap["GCJDBO"] = k.GCJDBO
	k.fieldMap["PKIIA"] = k.PKIIA
	k.fieldMap["PKIIG"] = k.PKIIG
	k.fieldMap["PKIIH"] = k.PKIIH
	k.fieldMap["PKIII"] = k.PKIII
	k.fieldMap["PKIIJ"] = k.PKIIJ
	k.fieldMap["PKIIL"] = k.PKIIL
	k.fieldMap["MEMO"] = k.MEMO
	k.fieldMap["数据"] = k.数据
}

func (k kckc) clone(db *gorm.DB) kckc {
	k.kckcDo.ReplaceDB(db)
	return k
}

type kckcDo struct{ gen.DO }

func (k kckcDo) Debug() *kckcDo {
	return k.withDO(k.DO.Debug())
}

func (k kckcDo) WithContext(ctx context.Context) *kckcDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kckcDo) ReadDB(ctx context.Context) *kckcDo {
	return k.WithContext(ctx).Clauses(dbresolver.Read)
}

func (k kckcDo) WriteDB(ctx context.Context) *kckcDo {
	return k.WithContext(ctx).Clauses(dbresolver.Write)
}

func (k kckcDo) Clauses(conds ...clause.Expression) *kckcDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kckcDo) Returning(value interface{}, columns ...string) *kckcDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kckcDo) Not(conds ...gen.Condition) *kckcDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kckcDo) Or(conds ...gen.Condition) *kckcDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kckcDo) Select(conds ...field.Expr) *kckcDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kckcDo) Where(conds ...gen.Condition) *kckcDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kckcDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *kckcDo {
	return k.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (k kckcDo) Order(conds ...field.Expr) *kckcDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kckcDo) Distinct(cols ...field.Expr) *kckcDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kckcDo) Omit(cols ...field.Expr) *kckcDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kckcDo) Join(table schema.Tabler, on ...field.Expr) *kckcDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kckcDo) LeftJoin(table schema.Tabler, on ...field.Expr) *kckcDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kckcDo) RightJoin(table schema.Tabler, on ...field.Expr) *kckcDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kckcDo) Group(cols ...field.Expr) *kckcDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kckcDo) Having(conds ...gen.Condition) *kckcDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kckcDo) Limit(limit int) *kckcDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kckcDo) Offset(offset int) *kckcDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kckcDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *kckcDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kckcDo) Unscoped() *kckcDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kckcDo) Create(values ...*model.Kckc) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kckcDo) CreateInBatches(values []*model.Kckc, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kckcDo) Save(values ...*model.Kckc) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kckcDo) First() (*model.Kckc, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kckc), nil
	}
}

func (k kckcDo) Take() (*model.Kckc, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kckc), nil
	}
}

func (k kckcDo) Last() (*model.Kckc, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kckc), nil
	}
}

func (k kckcDo) Find() ([]*model.Kckc, error) {
	result, err := k.DO.Find()
	return result.([]*model.Kckc), err
}

func (k kckcDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Kckc, err error) {
	buf := make([]*model.Kckc, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kckcDo) FindInBatches(result *[]*model.Kckc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kckcDo) Attrs(attrs ...field.AssignExpr) *kckcDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kckcDo) Assign(attrs ...field.AssignExpr) *kckcDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kckcDo) Joins(fields ...field.RelationField) *kckcDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kckcDo) Preload(fields ...field.RelationField) *kckcDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kckcDo) FirstOrInit() (*model.Kckc, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kckc), nil
	}
}

func (k kckcDo) FirstOrCreate() (*model.Kckc, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kckc), nil
	}
}

func (k kckcDo) FindByPage(offset int, limit int) (result []*model.Kckc, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kckcDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k *kckcDo) withDO(do gen.Dao) *kckcDo {
	k.DO = *do.(*gen.DO)
	return k
}

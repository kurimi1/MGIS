// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"LGIS/model"
)

func newXksy(db *gorm.DB) xksy {
	_xksy := xksy{}

	_xksy.xksyDo.UseDB(db)
	_xksy.xksyDo.UseModel(&model.Xksy{})

	tableName := _xksy.xksyDo.TableName()
	_xksy.ALL = field.NewField(tableName, "*")
	_xksy.KCAAA = field.NewString(tableName, "KCAAA")
	_xksy.XYAD = field.NewString(tableName, "XYAD")
	_xksy.XYAABA = field.NewString(tableName, "XYAABA")
	_xksy.XYABA = field.NewString(tableName, "XYABA")
	_xksy.XYACF = field.NewFloat32(tableName, "XYACF")
	_xksy.XYACB = field.NewString(tableName, "XYACB")
	_xksy.XYACA = field.NewString(tableName, "XYACA")
	_xksy.PKGLC = field.NewString(tableName, "PKGLC")
	_xksy.XYACJ = field.NewFloat32(tableName, "XYACJ")
	_xksy.XYACD = field.NewString(tableName, "XYACD")
	_xksy.PKGKPE = field.NewString(tableName, "PKGKPE")
	_xksy.PKGKQ = field.NewString(tableName, "PKGKQ")
	_xksy.PKHFE = field.NewString(tableName, "PKHFE")
	_xksy.数据 = field.NewString(tableName, "数据")

	_xksy.fillFieldMap()

	return _xksy
}

type xksy struct {
	xksyDo xksyDo

	ALL    field.Field
	KCAAA  field.String
	XYAD   field.String
	XYAABA field.String
	XYABA  field.String
	XYACF  field.Float32
	XYACB  field.String
	XYACA  field.String
	PKGLC  field.String
	XYACJ  field.Float32
	XYACD  field.String
	PKGKPE field.String
	PKGKQ  field.String
	PKHFE  field.String
	数据     field.String

	fieldMap map[string]field.Expr
}

func (x xksy) Table(newTableName string) *xksy {
	x.xksyDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xksy) As(alias string) *xksy {
	x.xksyDo.DO = *(x.xksyDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xksy) updateTableName(table string) *xksy {
	x.ALL = field.NewField(table, "*")
	x.KCAAA = field.NewString(table, "KCAAA")
	x.XYAD = field.NewString(table, "XYAD")
	x.XYAABA = field.NewString(table, "XYAABA")
	x.XYABA = field.NewString(table, "XYABA")
	x.XYACF = field.NewFloat32(table, "XYACF")
	x.XYACB = field.NewString(table, "XYACB")
	x.XYACA = field.NewString(table, "XYACA")
	x.PKGLC = field.NewString(table, "PKGLC")
	x.XYACJ = field.NewFloat32(table, "XYACJ")
	x.XYACD = field.NewString(table, "XYACD")
	x.PKGKPE = field.NewString(table, "PKGKPE")
	x.PKGKQ = field.NewString(table, "PKGKQ")
	x.PKHFE = field.NewString(table, "PKHFE")
	x.数据 = field.NewString(table, "数据")

	x.fillFieldMap()

	return x
}

func (x *xksy) WithContext(ctx context.Context) *xksyDo { return x.xksyDo.WithContext(ctx) }

func (x xksy) TableName() string { return x.xksyDo.TableName() }

func (x xksy) Alias() string { return x.xksyDo.Alias() }

func (x *xksy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xksy) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 14)
	x.fieldMap["KCAAA"] = x.KCAAA
	x.fieldMap["XYAD"] = x.XYAD
	x.fieldMap["XYAABA"] = x.XYAABA
	x.fieldMap["XYABA"] = x.XYABA
	x.fieldMap["XYACF"] = x.XYACF
	x.fieldMap["XYACB"] = x.XYACB
	x.fieldMap["XYACA"] = x.XYACA
	x.fieldMap["PKGLC"] = x.PKGLC
	x.fieldMap["XYACJ"] = x.XYACJ
	x.fieldMap["XYACD"] = x.XYACD
	x.fieldMap["PKGKPE"] = x.PKGKPE
	x.fieldMap["PKGKQ"] = x.PKGKQ
	x.fieldMap["PKHFE"] = x.PKHFE
	x.fieldMap["数据"] = x.数据
}

func (x xksy) clone(db *gorm.DB) xksy {
	x.xksyDo.ReplaceDB(db)
	return x
}

type xksyDo struct{ gen.DO }

func (x xksyDo) Debug() *xksyDo {
	return x.withDO(x.DO.Debug())
}

func (x xksyDo) WithContext(ctx context.Context) *xksyDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xksyDo) ReadDB(ctx context.Context) *xksyDo {
	return x.WithContext(ctx).Clauses(dbresolver.Read)
}

func (x xksyDo) WriteDB(ctx context.Context) *xksyDo {
	return x.WithContext(ctx).Clauses(dbresolver.Write)
}

func (x xksyDo) Clauses(conds ...clause.Expression) *xksyDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xksyDo) Returning(value interface{}, columns ...string) *xksyDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xksyDo) Not(conds ...gen.Condition) *xksyDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xksyDo) Or(conds ...gen.Condition) *xksyDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xksyDo) Select(conds ...field.Expr) *xksyDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xksyDo) Where(conds ...gen.Condition) *xksyDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xksyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *xksyDo {
	return x.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (x xksyDo) Order(conds ...field.Expr) *xksyDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xksyDo) Distinct(cols ...field.Expr) *xksyDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xksyDo) Omit(cols ...field.Expr) *xksyDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xksyDo) Join(table schema.Tabler, on ...field.Expr) *xksyDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xksyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *xksyDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xksyDo) RightJoin(table schema.Tabler, on ...field.Expr) *xksyDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xksyDo) Group(cols ...field.Expr) *xksyDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xksyDo) Having(conds ...gen.Condition) *xksyDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xksyDo) Limit(limit int) *xksyDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xksyDo) Offset(offset int) *xksyDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xksyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *xksyDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xksyDo) Unscoped() *xksyDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xksyDo) Create(values ...*model.Xksy) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xksyDo) CreateInBatches(values []*model.Xksy, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xksyDo) Save(values ...*model.Xksy) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xksyDo) First() (*model.Xksy, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Xksy), nil
	}
}

func (x xksyDo) Take() (*model.Xksy, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Xksy), nil
	}
}

func (x xksyDo) Last() (*model.Xksy, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Xksy), nil
	}
}

func (x xksyDo) Find() ([]*model.Xksy, error) {
	result, err := x.DO.Find()
	return result.([]*model.Xksy), err
}

func (x xksyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Xksy, err error) {
	buf := make([]*model.Xksy, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xksyDo) FindInBatches(result *[]*model.Xksy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xksyDo) Attrs(attrs ...field.AssignExpr) *xksyDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xksyDo) Assign(attrs ...field.AssignExpr) *xksyDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xksyDo) Joins(fields ...field.RelationField) *xksyDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xksyDo) Preload(fields ...field.RelationField) *xksyDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xksyDo) FirstOrInit() (*model.Xksy, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Xksy), nil
	}
}

func (x xksyDo) FirstOrCreate() (*model.Xksy, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Xksy), nil
	}
}

func (x xksyDo) FindByPage(offset int, limit int) (result []*model.Xksy, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xksyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x *xksyDo) withDO(do gen.Dao) *xksyDo {
	x.DO = *do.(*gen.DO)
	return x
}

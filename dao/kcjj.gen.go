// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"LGIS/model"
)

func newKcjj(db *gorm.DB) kcjj {
	_kcjj := kcjj{}

	_kcjj.kcjjDo.UseDB(db)
	_kcjj.kcjjDo.UseModel(&model.Kcjj{})

	tableName := _kcjj.kcjjDo.TableName()
	_kcjj.ALL = field.NewField(tableName, "*")
	_kcjj.KCAAA = field.NewString(tableName, "KCAAA")
	_kcjj.JJGAH = field.NewFloat64(tableName, "JJGAH")
	_kcjj.JJGAL = field.NewInt32(tableName, "JJGAL")
	_kcjj.JJGAM = field.NewString(tableName, "JJGAM")
	_kcjj.JJGHD = field.NewFloat64(tableName, "JJGHD")
	_kcjj.JJGDB = field.NewFloat64(tableName, "JJGDB")
	_kcjj.JJGJAD = field.NewFloat64(tableName, "JJGJAD")
	_kcjj.JJGJDF = field.NewFloat32(tableName, "JJGJDF")
	_kcjj.JJGKC = field.NewInt32(tableName, "JJGKC")
	_kcjj.数据 = field.NewString(tableName, "数据")

	_kcjj.fillFieldMap()

	return _kcjj
}

type kcjj struct {
	kcjjDo kcjjDo

	ALL    field.Field
	KCAAA  field.String
	JJGAH  field.Float64
	JJGAL  field.Int32
	JJGAM  field.String
	JJGHD  field.Float64
	JJGDB  field.Float64
	JJGJAD field.Float64
	JJGJDF field.Float32
	JJGKC  field.Int32
	数据     field.String

	fieldMap map[string]field.Expr
}

func (k kcjj) Table(newTableName string) *kcjj {
	k.kcjjDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kcjj) As(alias string) *kcjj {
	k.kcjjDo.DO = *(k.kcjjDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kcjj) updateTableName(table string) *kcjj {
	k.ALL = field.NewField(table, "*")
	k.KCAAA = field.NewString(table, "KCAAA")
	k.JJGAH = field.NewFloat64(table, "JJGAH")
	k.JJGAL = field.NewInt32(table, "JJGAL")
	k.JJGAM = field.NewString(table, "JJGAM")
	k.JJGHD = field.NewFloat64(table, "JJGHD")
	k.JJGDB = field.NewFloat64(table, "JJGDB")
	k.JJGJAD = field.NewFloat64(table, "JJGJAD")
	k.JJGJDF = field.NewFloat32(table, "JJGJDF")
	k.JJGKC = field.NewInt32(table, "JJGKC")
	k.数据 = field.NewString(table, "数据")

	k.fillFieldMap()

	return k
}

func (k *kcjj) WithContext(ctx context.Context) *kcjjDo { return k.kcjjDo.WithContext(ctx) }

func (k kcjj) TableName() string { return k.kcjjDo.TableName() }

func (k kcjj) Alias() string { return k.kcjjDo.Alias() }

func (k *kcjj) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kcjj) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 10)
	k.fieldMap["KCAAA"] = k.KCAAA
	k.fieldMap["JJGAH"] = k.JJGAH
	k.fieldMap["JJGAL"] = k.JJGAL
	k.fieldMap["JJGAM"] = k.JJGAM
	k.fieldMap["JJGHD"] = k.JJGHD
	k.fieldMap["JJGDB"] = k.JJGDB
	k.fieldMap["JJGJAD"] = k.JJGJAD
	k.fieldMap["JJGJDF"] = k.JJGJDF
	k.fieldMap["JJGKC"] = k.JJGKC
	k.fieldMap["数据"] = k.数据
}

func (k kcjj) clone(db *gorm.DB) kcjj {
	k.kcjjDo.ReplaceDB(db)
	return k
}

type kcjjDo struct{ gen.DO }

func (k kcjjDo) Debug() *kcjjDo {
	return k.withDO(k.DO.Debug())
}

func (k kcjjDo) WithContext(ctx context.Context) *kcjjDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kcjjDo) ReadDB(ctx context.Context) *kcjjDo {
	return k.WithContext(ctx).Clauses(dbresolver.Read)
}

func (k kcjjDo) WriteDB(ctx context.Context) *kcjjDo {
	return k.WithContext(ctx).Clauses(dbresolver.Write)
}

func (k kcjjDo) Clauses(conds ...clause.Expression) *kcjjDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kcjjDo) Returning(value interface{}, columns ...string) *kcjjDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kcjjDo) Not(conds ...gen.Condition) *kcjjDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kcjjDo) Or(conds ...gen.Condition) *kcjjDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kcjjDo) Select(conds ...field.Expr) *kcjjDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kcjjDo) Where(conds ...gen.Condition) *kcjjDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kcjjDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *kcjjDo {
	return k.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (k kcjjDo) Order(conds ...field.Expr) *kcjjDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kcjjDo) Distinct(cols ...field.Expr) *kcjjDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kcjjDo) Omit(cols ...field.Expr) *kcjjDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kcjjDo) Join(table schema.Tabler, on ...field.Expr) *kcjjDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kcjjDo) LeftJoin(table schema.Tabler, on ...field.Expr) *kcjjDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kcjjDo) RightJoin(table schema.Tabler, on ...field.Expr) *kcjjDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kcjjDo) Group(cols ...field.Expr) *kcjjDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kcjjDo) Having(conds ...gen.Condition) *kcjjDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kcjjDo) Limit(limit int) *kcjjDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kcjjDo) Offset(offset int) *kcjjDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kcjjDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *kcjjDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kcjjDo) Unscoped() *kcjjDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kcjjDo) Create(values ...*model.Kcjj) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kcjjDo) CreateInBatches(values []*model.Kcjj, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kcjjDo) Save(values ...*model.Kcjj) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kcjjDo) First() (*model.Kcjj, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcjj), nil
	}
}

func (k kcjjDo) Take() (*model.Kcjj, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcjj), nil
	}
}

func (k kcjjDo) Last() (*model.Kcjj, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcjj), nil
	}
}

func (k kcjjDo) Find() ([]*model.Kcjj, error) {
	result, err := k.DO.Find()
	return result.([]*model.Kcjj), err
}

func (k kcjjDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Kcjj, err error) {
	buf := make([]*model.Kcjj, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kcjjDo) FindInBatches(result *[]*model.Kcjj, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kcjjDo) Attrs(attrs ...field.AssignExpr) *kcjjDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kcjjDo) Assign(attrs ...field.AssignExpr) *kcjjDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kcjjDo) Joins(fields ...field.RelationField) *kcjjDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kcjjDo) Preload(fields ...field.RelationField) *kcjjDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kcjjDo) FirstOrInit() (*model.Kcjj, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcjj), nil
	}
}

func (k kcjjDo) FirstOrCreate() (*model.Kcjj, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcjj), nil
	}
}

func (k kcjjDo) FindByPage(offset int, limit int) (result []*model.Kcjj, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kcjjDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k *kcjjDo) withDO(do gen.Dao) *kcjjDo {
	k.DO = *do.(*gen.DO)
	return k
}

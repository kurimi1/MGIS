// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"LGIS/model"
)

func newKcmc(db *gorm.DB) kcmc {
	_kcmc := kcmc{}

	_kcmc.kcmcDo.UseDB(db)
	_kcmc.kcmcDo.UseModel(&model.Kcmc{})

	tableName := _kcmc.kcmcDo.TableName()
	_kcmc.ALL = field.NewField(tableName, "*")
	_kcmc.KCAAA = field.NewString(tableName, "KCAAA")
	_kcmc.MDAGA = field.NewString(tableName, "MDAGA")
	_kcmc.MDBFNG = field.NewFloat32(tableName, "MDBFNG")
	_kcmc.MDAGP = field.NewString(tableName, "MDAGP")
	_kcmc.MDBEB = field.NewString(tableName, "MDBEB")
	_kcmc.MDCHWK = field.NewFloat32(tableName, "MDCHWK")
	_kcmc.MDHEAA = field.NewFloat32(tableName, "MDHEAA")
	_kcmc.MDCDC = field.NewFloat32(tableName, "MDCDC")
	_kcmc.MDCDF = field.NewFloat32(tableName, "MDCDF")
	_kcmc.MDEG = field.NewString(tableName, "MDEG")
	_kcmc.数据 = field.NewString(tableName, "数据")

	_kcmc.fillFieldMap()

	return _kcmc
}

type kcmc struct {
	kcmcDo kcmcDo

	ALL    field.Field
	KCAAA  field.String
	MDAGA  field.String
	MDBFNG field.Float32
	MDAGP  field.String
	MDBEB  field.String
	MDCHWK field.Float32
	MDHEAA field.Float32
	MDCDC  field.Float32
	MDCDF  field.Float32
	MDEG   field.String
	数据     field.String

	fieldMap map[string]field.Expr
}

func (k kcmc) Table(newTableName string) *kcmc {
	k.kcmcDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kcmc) As(alias string) *kcmc {
	k.kcmcDo.DO = *(k.kcmcDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kcmc) updateTableName(table string) *kcmc {
	k.ALL = field.NewField(table, "*")
	k.KCAAA = field.NewString(table, "KCAAA")
	k.MDAGA = field.NewString(table, "MDAGA")
	k.MDBFNG = field.NewFloat32(table, "MDBFNG")
	k.MDAGP = field.NewString(table, "MDAGP")
	k.MDBEB = field.NewString(table, "MDBEB")
	k.MDCHWK = field.NewFloat32(table, "MDCHWK")
	k.MDHEAA = field.NewFloat32(table, "MDHEAA")
	k.MDCDC = field.NewFloat32(table, "MDCDC")
	k.MDCDF = field.NewFloat32(table, "MDCDF")
	k.MDEG = field.NewString(table, "MDEG")
	k.数据 = field.NewString(table, "数据")

	k.fillFieldMap()

	return k
}

func (k *kcmc) WithContext(ctx context.Context) *kcmcDo { return k.kcmcDo.WithContext(ctx) }

func (k kcmc) TableName() string { return k.kcmcDo.TableName() }

func (k kcmc) Alias() string { return k.kcmcDo.Alias() }

func (k *kcmc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kcmc) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 11)
	k.fieldMap["KCAAA"] = k.KCAAA
	k.fieldMap["MDAGA"] = k.MDAGA
	k.fieldMap["MDBFNG"] = k.MDBFNG
	k.fieldMap["MDAGP"] = k.MDAGP
	k.fieldMap["MDBEB"] = k.MDBEB
	k.fieldMap["MDCHWK"] = k.MDCHWK
	k.fieldMap["MDHEAA"] = k.MDHEAA
	k.fieldMap["MDCDC"] = k.MDCDC
	k.fieldMap["MDCDF"] = k.MDCDF
	k.fieldMap["MDEG"] = k.MDEG
	k.fieldMap["数据"] = k.数据
}

func (k kcmc) clone(db *gorm.DB) kcmc {
	k.kcmcDo.ReplaceDB(db)
	return k
}

type kcmcDo struct{ gen.DO }

func (k kcmcDo) Debug() *kcmcDo {
	return k.withDO(k.DO.Debug())
}

func (k kcmcDo) WithContext(ctx context.Context) *kcmcDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kcmcDo) ReadDB(ctx context.Context) *kcmcDo {
	return k.WithContext(ctx).Clauses(dbresolver.Read)
}

func (k kcmcDo) WriteDB(ctx context.Context) *kcmcDo {
	return k.WithContext(ctx).Clauses(dbresolver.Write)
}

func (k kcmcDo) Clauses(conds ...clause.Expression) *kcmcDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kcmcDo) Returning(value interface{}, columns ...string) *kcmcDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kcmcDo) Not(conds ...gen.Condition) *kcmcDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kcmcDo) Or(conds ...gen.Condition) *kcmcDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kcmcDo) Select(conds ...field.Expr) *kcmcDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kcmcDo) Where(conds ...gen.Condition) *kcmcDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kcmcDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *kcmcDo {
	return k.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (k kcmcDo) Order(conds ...field.Expr) *kcmcDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kcmcDo) Distinct(cols ...field.Expr) *kcmcDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kcmcDo) Omit(cols ...field.Expr) *kcmcDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kcmcDo) Join(table schema.Tabler, on ...field.Expr) *kcmcDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kcmcDo) LeftJoin(table schema.Tabler, on ...field.Expr) *kcmcDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kcmcDo) RightJoin(table schema.Tabler, on ...field.Expr) *kcmcDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kcmcDo) Group(cols ...field.Expr) *kcmcDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kcmcDo) Having(conds ...gen.Condition) *kcmcDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kcmcDo) Limit(limit int) *kcmcDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kcmcDo) Offset(offset int) *kcmcDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kcmcDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *kcmcDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kcmcDo) Unscoped() *kcmcDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kcmcDo) Create(values ...*model.Kcmc) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kcmcDo) CreateInBatches(values []*model.Kcmc, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kcmcDo) Save(values ...*model.Kcmc) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kcmcDo) First() (*model.Kcmc, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcmc), nil
	}
}

func (k kcmcDo) Take() (*model.Kcmc, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcmc), nil
	}
}

func (k kcmcDo) Last() (*model.Kcmc, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcmc), nil
	}
}

func (k kcmcDo) Find() ([]*model.Kcmc, error) {
	result, err := k.DO.Find()
	return result.([]*model.Kcmc), err
}

func (k kcmcDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Kcmc, err error) {
	buf := make([]*model.Kcmc, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kcmcDo) FindInBatches(result *[]*model.Kcmc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kcmcDo) Attrs(attrs ...field.AssignExpr) *kcmcDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kcmcDo) Assign(attrs ...field.AssignExpr) *kcmcDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kcmcDo) Joins(fields ...field.RelationField) *kcmcDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kcmcDo) Preload(fields ...field.RelationField) *kcmcDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kcmcDo) FirstOrInit() (*model.Kcmc, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcmc), nil
	}
}

func (k kcmcDo) FirstOrCreate() (*model.Kcmc, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcmc), nil
	}
}

func (k kcmcDo) FindByPage(offset int, limit int) (result []*model.Kcmc, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kcmcDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k *kcmcDo) withDO(do gen.Dao) *kcmcDo {
	k.DO = *do.(*gen.DO)
	return k
}

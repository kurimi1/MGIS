// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"LGIS/model"
)

func newKcql(db *gorm.DB) kcql {
	_kcql := kcql{}

	_kcql.kcqlDo.UseDB(db)
	_kcql.kcqlDo.UseModel(&model.Kcql{})

	tableName := _kcql.kcqlDo.TableName()
	_kcql.ALL = field.NewField(tableName, "*")
	_kcql.KCAAA = field.NewString(tableName, "KCAAA")
	_kcql.DWAACJ = field.NewString(tableName, "DWAACJ")
	_kcql.DWAADJ = field.NewString(tableName, "DWAADJ")
	_kcql.MDAAC = field.NewString(tableName, "MDAAC")
	_kcql.MDAREA = field.NewFloat32(tableName, "MDAREA")
	_kcql.MDBA = field.NewString(tableName, "MDBA")
	_kcql.MDCP = field.NewString(tableName, "MDCP")
	_kcql.MDEG = field.NewString(tableName, "MDEG")
	_kcql.MDBFNQ = field.NewString(tableName, "MDBFNQ")
	_kcql.PKBBB = field.NewFloat64(tableName, "PKBBB")
	_kcql.数据 = field.NewString(tableName, "数据")

	_kcql.fillFieldMap()

	return _kcql
}

type kcql struct {
	kcqlDo kcqlDo

	ALL    field.Field
	KCAAA  field.String
	DWAACJ field.String
	DWAADJ field.String
	MDAAC  field.String
	MDAREA field.Float32
	MDBA   field.String
	MDCP   field.String
	MDEG   field.String
	MDBFNQ field.String
	PKBBB  field.Float64
	数据     field.String

	fieldMap map[string]field.Expr
}

func (k kcql) Table(newTableName string) *kcql {
	k.kcqlDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kcql) As(alias string) *kcql {
	k.kcqlDo.DO = *(k.kcqlDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kcql) updateTableName(table string) *kcql {
	k.ALL = field.NewField(table, "*")
	k.KCAAA = field.NewString(table, "KCAAA")
	k.DWAACJ = field.NewString(table, "DWAACJ")
	k.DWAADJ = field.NewString(table, "DWAADJ")
	k.MDAAC = field.NewString(table, "MDAAC")
	k.MDAREA = field.NewFloat32(table, "MDAREA")
	k.MDBA = field.NewString(table, "MDBA")
	k.MDCP = field.NewString(table, "MDCP")
	k.MDEG = field.NewString(table, "MDEG")
	k.MDBFNQ = field.NewString(table, "MDBFNQ")
	k.PKBBB = field.NewFloat64(table, "PKBBB")
	k.数据 = field.NewString(table, "数据")

	k.fillFieldMap()

	return k
}

func (k *kcql) WithContext(ctx context.Context) *kcqlDo { return k.kcqlDo.WithContext(ctx) }

func (k kcql) TableName() string { return k.kcqlDo.TableName() }

func (k kcql) Alias() string { return k.kcqlDo.Alias() }

func (k *kcql) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kcql) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 11)
	k.fieldMap["KCAAA"] = k.KCAAA
	k.fieldMap["DWAACJ"] = k.DWAACJ
	k.fieldMap["DWAADJ"] = k.DWAADJ
	k.fieldMap["MDAAC"] = k.MDAAC
	k.fieldMap["MDAREA"] = k.MDAREA
	k.fieldMap["MDBA"] = k.MDBA
	k.fieldMap["MDCP"] = k.MDCP
	k.fieldMap["MDEG"] = k.MDEG
	k.fieldMap["MDBFNQ"] = k.MDBFNQ
	k.fieldMap["PKBBB"] = k.PKBBB
	k.fieldMap["数据"] = k.数据
}

func (k kcql) clone(db *gorm.DB) kcql {
	k.kcqlDo.ReplaceDB(db)
	return k
}

type kcqlDo struct{ gen.DO }

func (k kcqlDo) Debug() *kcqlDo {
	return k.withDO(k.DO.Debug())
}

func (k kcqlDo) WithContext(ctx context.Context) *kcqlDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kcqlDo) ReadDB(ctx context.Context) *kcqlDo {
	return k.WithContext(ctx).Clauses(dbresolver.Read)
}

func (k kcqlDo) WriteDB(ctx context.Context) *kcqlDo {
	return k.WithContext(ctx).Clauses(dbresolver.Write)
}

func (k kcqlDo) Clauses(conds ...clause.Expression) *kcqlDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kcqlDo) Returning(value interface{}, columns ...string) *kcqlDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kcqlDo) Not(conds ...gen.Condition) *kcqlDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kcqlDo) Or(conds ...gen.Condition) *kcqlDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kcqlDo) Select(conds ...field.Expr) *kcqlDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kcqlDo) Where(conds ...gen.Condition) *kcqlDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kcqlDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *kcqlDo {
	return k.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (k kcqlDo) Order(conds ...field.Expr) *kcqlDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kcqlDo) Distinct(cols ...field.Expr) *kcqlDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kcqlDo) Omit(cols ...field.Expr) *kcqlDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kcqlDo) Join(table schema.Tabler, on ...field.Expr) *kcqlDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kcqlDo) LeftJoin(table schema.Tabler, on ...field.Expr) *kcqlDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kcqlDo) RightJoin(table schema.Tabler, on ...field.Expr) *kcqlDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kcqlDo) Group(cols ...field.Expr) *kcqlDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kcqlDo) Having(conds ...gen.Condition) *kcqlDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kcqlDo) Limit(limit int) *kcqlDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kcqlDo) Offset(offset int) *kcqlDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kcqlDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *kcqlDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kcqlDo) Unscoped() *kcqlDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kcqlDo) Create(values ...*model.Kcql) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kcqlDo) CreateInBatches(values []*model.Kcql, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kcqlDo) Save(values ...*model.Kcql) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kcqlDo) First() (*model.Kcql, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcql), nil
	}
}

func (k kcqlDo) Take() (*model.Kcql, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcql), nil
	}
}

func (k kcqlDo) Last() (*model.Kcql, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcql), nil
	}
}

func (k kcqlDo) Find() ([]*model.Kcql, error) {
	result, err := k.DO.Find()
	return result.([]*model.Kcql), err
}

func (k kcqlDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Kcql, err error) {
	buf := make([]*model.Kcql, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kcqlDo) FindInBatches(result *[]*model.Kcql, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kcqlDo) Attrs(attrs ...field.AssignExpr) *kcqlDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kcqlDo) Assign(attrs ...field.AssignExpr) *kcqlDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kcqlDo) Joins(fields ...field.RelationField) *kcqlDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kcqlDo) Preload(fields ...field.RelationField) *kcqlDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kcqlDo) FirstOrInit() (*model.Kcql, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcql), nil
	}
}

func (k kcqlDo) FirstOrCreate() (*model.Kcql, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kcql), nil
	}
}

func (k kcqlDo) FindByPage(offset int, limit int) (result []*model.Kcql, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kcqlDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k *kcqlDo) withDO(do gen.Dao) *kcqlDo {
	k.DO = *do.(*gen.DO)
	return k
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:   db,
		Kccl: newKccl(db),
		Kcdj: newKcdj(db),
		Kcj:  newKcj(db),
		Kcjj: newKcjj(db),
		Kckc: newKckc(db),
		Kcmc: newKcmc(db),
		Kcql: newKcql(db),
		Kqdz: newKqdz(db),
		Kttz: newKttz(db),
		Mctz: newMctz(db),
		Xksy: newXksy(db),
	}
}

type Query struct {
	db *gorm.DB

	Kccl kccl
	Kcdj kcdj
	Kcj  kcj
	Kcjj kcjj
	Kckc kckc
	Kcmc kcmc
	Kcql kcql
	Kqdz kqdz
	Kttz kttz
	Mctz mctz
	Xksy xksy
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:   db,
		Kccl: q.Kccl.clone(db),
		Kcdj: q.Kcdj.clone(db),
		Kcj:  q.Kcj.clone(db),
		Kcjj: q.Kcjj.clone(db),
		Kckc: q.Kckc.clone(db),
		Kcmc: q.Kcmc.clone(db),
		Kcql: q.Kcql.clone(db),
		Kqdz: q.Kqdz.clone(db),
		Kttz: q.Kttz.clone(db),
		Mctz: q.Mctz.clone(db),
		Xksy: q.Xksy.clone(db),
	}
}

type queryCtx struct {
	Kccl kcclDo
	Kcdj kcdjDo
	Kcj  kcjDo
	Kcjj kcjjDo
	Kckc kckcDo
	Kcmc kcmcDo
	Kcql kcqlDo
	Kqdz kqdzDo
	Kttz kttzDo
	Mctz mctzDo
	Xksy xksyDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Kccl: *q.Kccl.WithContext(ctx),
		Kcdj: *q.Kcdj.WithContext(ctx),
		Kcj:  *q.Kcj.WithContext(ctx),
		Kcjj: *q.Kcjj.WithContext(ctx),
		Kckc: *q.Kckc.WithContext(ctx),
		Kcmc: *q.Kcmc.WithContext(ctx),
		Kcql: *q.Kcql.WithContext(ctx),
		Kqdz: *q.Kqdz.WithContext(ctx),
		Kttz: *q.Kttz.WithContext(ctx),
		Mctz: *q.Mctz.WithContext(ctx),
		Xksy: *q.Xksy.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
